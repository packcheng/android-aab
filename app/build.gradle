apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    defaultConfig {
        applicationId "com.packcheng.aab"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 56
        versionName "0.9"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias 'packcheng'
            keyPassword '123456789'
            storeFile file('../bundletool/packcheng.keystore')
            storePassword '123456789'
        }
        debug {
            keyAlias 'packcheng'
            keyPassword '123456789'
            storeFile file('../bundletool/packcheng.keystore')
            storePassword '123456789'
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name.equals('release')) {
                //这个修改输出的APK路径
                variant.getPackageApplication().outputDirectory = new File("../bundletool/output/")
                variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                    //这个修改输出APK的文件名
                    apkData.outputFileName = "${variant.name}-${variant.versionName}.apk"
                }
            }
        }
    }
}

// 拷贝生成的AAB文件
tasks.whenTaskAdded { task ->
    if (task.name.startsWith("bundle")) {
        def renameTaskName = "rename${task.name.capitalize()}Aab"
        def flavor = task.name.substring("bundle".length()).uncapitalize()
        tasks.create(renameTaskName, Copy) {
            def path = "${buildDir}/outputs/bundle/${flavor}/"
            from(path)
            include "app-${flavor}.aab"
            destinationDir file("../bundletool/output/")
            rename "app-${flavor}.aab", "${flavor}.aab"
        }

        task.finalizedBy(renameTaskName)
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}